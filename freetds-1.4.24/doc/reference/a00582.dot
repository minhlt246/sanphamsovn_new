digraph "LibTDS API"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir=LR;
  Node2 [id="Node000002",label="Authentication",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00573.html",tooltip="Functions for handling authentication."];
  Node3 [id="Node000003",label="Configuration",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00574.html",tooltip="Handle reading of configuration."];
  Node5 [id="Node000005",label="Charset conversion",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00576.html",tooltip="Convert between different charsets."];
  Node4 [id="Node000004",label="Conversion",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00575.html",tooltip="Conversions between datatypes."];
  Node10 [id="Node000010",label="Dynamic string functions",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00581.html",tooltip="Handle dynamic string."];
  Node1 [id="Node000001",label="LibTDS API",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Callable functions in libtds."];
  Node6 [id="Node000006",label="Memory allocation",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00577.html",tooltip="Allocate or free resources."];
  Node8 [id="Node000008",label="Network functions",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00579.html",tooltip="Functions for reading or writing from network."];
  Node7 [id="Node000007",label="Query",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00578.html",tooltip="Function to handle query."];
  Node9 [id="Node000009",label="Results processing",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00580.html",tooltip="Handle tokens in packets."];
  Node1->Node2 [shape=plaintext, dir="back", style="solid"];
  Node1->Node3 [shape=plaintext, dir="back", style="solid"];
  Node1->Node4 [shape=plaintext, dir="back", style="solid"];
  Node1->Node5 [shape=plaintext, dir="back", style="solid"];
  Node1->Node6 [shape=plaintext, dir="back", style="solid"];
  Node1->Node7 [shape=plaintext, dir="back", style="solid"];
  Node1->Node8 [shape=plaintext, dir="back", style="solid"];
  Node1->Node9 [shape=plaintext, dir="back", style="solid"];
  Node1->Node10 [shape=plaintext, dir="back", style="solid"];
}
